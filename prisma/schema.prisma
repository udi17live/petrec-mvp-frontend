// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  deleted Boolean @default(false)
  sessions   Session[]
  appointments Appointment[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  sessionToken String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id Int @id @default(autoincrement())
  scribeHash String @default(uuid()) @db.VarChar(255) @unique
  clientName String @db.VarChar(400)
  clientEmail String @db.VarChar(200)
  doctorId Int 
  doctor User @relation(fields:[doctorId], references: [id])
  petId Int
  pet Pet @relation(fields: [petId], references: [id])
  deleted Boolean @default(false)
  platform BookingPlatform @default(ONLINE)
  appointmentType String @db.VarChar(200)
  startTime DateTime
  endTime DateTime
  fileUrl String? @db.VarChar(700)
  statusId AppointmentStatus @default(UPCOMING)
  dataProcessingStatus AppointmentDataProcessingStatus @default(COMPLETED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  SoapNote Soapnote?
}

model Species {
  id Int @id @default(autoincrement())
  name String
  pets Pet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id Int @id @default(autoincrement())
  name String @db.VarChar(200)
  dateOfBirth DateTime?
  weight Float
  speciesId Int
  species Species @relation(fields:[speciesId], references: [id])
  deleted Boolean @default(false)
  appointments Appointment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AppointmentStatus {
  COMPLETED
  INPROGRESS
  UPCOMING
}

enum AppointmentDataProcessingStatus {
  COMPLETED
  PENDING
  QUEUED
  ERROR
}

enum BookingPlatform {
  ONLINE
  DIRECT
}

model Soapnote {
  id Int @id @default(autoincrement())
  appointmentId Int @unique
  appointment Appointment @relation(fields:[appointmentId], references: [id], onDelete: Cascade)
  summary String
  subjectiveNote Subjectivenote?
  objectiveNote Objectivenote?
  assesmentNote Assesmentnote?
  planNote Plannote?
}

model Subjectivenote {
  id Int @id @default(autoincrement())
  soapNoteId Int @unique
  soapnote Soapnote @relation(fields:[soapNoteId], references: [id], onDelete: Cascade)
  chiefComplaint String
  historyOfPresentIllness String
  behaviouralAndDietaryChanges String
  priorMedicalHistory String
}

model Objectivenote {
  id Int @id @default(autoincrement())
  soapNoteId Int @unique
  soapnote Soapnote @relation(fields:[soapNoteId], references: [id], onDelete: Cascade)
  vitalSigns String
  physicalExaminationFindings String
  diagonosticTestResults String
  measurementsAndObservations String
}

model Assesmentnote {
  id Int @id @default(autoincrement())
  soapNoteId Int @unique
  soapnote Soapnote @relation(fields:[soapNoteId], references: [id], onDelete: Cascade)
  primaryDiagnosis String
  differentialDiagnoses String
  prognosis String
}

model Plannote {
  id Int @id @default(autoincrement())
  soapNoteId Int @unique
  soapnote Soapnote @relation(fields:[soapNoteId], references: [id], onDelete: Cascade)
  treatmentPlan String
  dietaryRecommendations String
  ownerInstructions String
  followupCare String
}
